[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistika dan Probabilitas",
    "section": "",
    "text": "Repositori ini berisi materi perkuliahan Statistika dan Probabilitas untuk mahasiswa Perbanas Institute."
  },
  {
    "objectID": "index.html#si243040-3-sks",
    "href": "index.html#si243040-3-sks",
    "title": "Statistika dan Probabilitas",
    "section": "",
    "text": "Repositori ini berisi materi perkuliahan Statistika dan Probabilitas untuk mahasiswa Perbanas Institute."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Statistika dan Probabilitas",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\nDate and Time\nVenue\nTopic & Slides\nQuiz\n\n\n\n\nSat, 3 Sep 2025\nOnline\nPengantar Statistika dan Probabilitas\ntba\n\n\nSat, 19 Sep 2025\nSoon\ntba\ntba\n\n\nSat, 17 Sep 2025\nSoon\ntba\ntba\n\n\nSat, 24 Oct 2025\nSoon\ntba\ntba"
  },
  {
    "objectID": "for-tas/02-numpy-notes.html",
    "href": "for-tas/02-numpy-notes.html",
    "title": "Introduction to Numpy & Matplotlib",
    "section": "",
    "text": "Create .ipynb in VS Code\nDifference between markdown cells and code cells\nMarkdown (very briefly)"
  },
  {
    "objectID": "for-tas/02-numpy-notes.html#section-1-jupyter-notebook",
    "href": "for-tas/02-numpy-notes.html#section-1-jupyter-notebook",
    "title": "Introduction to Numpy & Matplotlib",
    "section": "",
    "text": "Create .ipynb in VS Code\nDifference between markdown cells and code cells\nMarkdown (very briefly)"
  },
  {
    "objectID": "for-tas/02-numpy-notes.html#section-2-numpy-arrays",
    "href": "for-tas/02-numpy-notes.html#section-2-numpy-arrays",
    "title": "Introduction to Numpy & Matplotlib",
    "section": "Section 2: Numpy arrays",
    "text": "Section 2: Numpy arrays\nInstalling Numpy (can run in the code cells)\npip install numpy\nImporting numpy\nimport numpy as np\nNumpy creation and operations\nnp.arange creates evenly spaced values within a given interval:\nrange_array = np.arange(0, 10, 0.5)\nprint(\"Range array:\", range_array)\nFrom list to array:\nlist_array = np.array([1, 2, 3, 4, 5])\nprint(\"NumPy array:\", list_array)\nIndexing and slicing\nprint(\"Original array:\", range_array)\nprint(\"First element:\", range_array[0])\nprint(\"Last element:\", range_array[-1])\nprint(\"Slicing (elements 3 to 7):\", range_array[2:7])\nrange_array[0] = 99\nprint(\"Update value of first element:\", range_array[0])\nCopies vs Views\n\nChanges in original will be reflected in view and vice versa\nChanges in original will NOT be reflected in copy\n\n# original array\noriginal = np.array([1, 2, 3, 4, 5])\nprint(\"Original array:\", original)\n\n# view of the original array\nview = original.view()\nprint(\"View:\", view)\n\n# copy of the original array\ncopy = original.copy()\nprint(\"Copy:\", copy)\n\n# Modify the original array\noriginal[0] = 99\nprint(\"\\nAfter modifying the original array:\")\nprint(\"Original array:\", original)\nprint(\"View now:\", view)  # reflects the changes\nprint(\"Copy now:\", copy)  # remains unchanged\n\n# Modify the view\nview[1] = 100\nprint(\"\\nAfter modifying the view:\")\nprint(\"Original array:\", original)  # affected\nprint(\"View now:\", view)\nprint(\"Copy now:\", copy)  # remains unchanged\n\n# Modify the copy\ncopy[2] = 200\nprint(\"\\nAfter modifying the copy:\")\nprint(\"Original array:\", original)  # not affected\nprint(\"View now:\", view)  # not affected\nprint(\"Copy now:\", copy)"
  },
  {
    "objectID": "for-tas/02-numpy-notes.html#section-3-two-dimensional-arrays",
    "href": "for-tas/02-numpy-notes.html#section-3-two-dimensional-arrays",
    "title": "Introduction to Numpy & Matplotlib",
    "section": "Section 3: Two-dimensional arrays",
    "text": "Section 3: Two-dimensional arrays\narray_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(array_2d)\nprint(\"Shape of the array:\", array_2d.shape)\nprint(\"Size of the array:\", array_2d.size)\nIndices in a 2D array:\narray_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(array_2d[0,0])\nLoading a CSV file to 2D array.\nIn this CSV, the rows represent 7 different sectors and the columns represent the quarters from 2023 Q4, dating back all the way to 2019 Q1.\nEach cell contains the GDP growth of that sector for that quarter, compared to previous year’s quarters.\ngdp_data = np.loadtxt('data/sg-gdp.csv', delimiter=',', dtype=\"float16\")\nnp.set_printoptions(suppress=True)\n\nprint(\"GDP data\")\nprint(gdp_data)\nprint(\"GDP data shape:\", gdp_data.shape)\n\nFind out the mean, standard deviation, max, and mean values.\n\nprint(\"Mean of GDP data:\", np.mean(gdp_data))\nprint(\"Standard deviation of GDP data:\", np.std(gdp_data))\nprint(\"Maximum value in GDP data:\", np.amax(gdp_data))\nprint(\"Minimum value in GDP data:\", np.amin(gdp_data))\n\nFind the mean for each quarter (column-wise operation)\nFind the mean for each sector (row-wise operation)\n\nprint(\"Mean of each quarter:\", np.mean(gdp_data, axis=0))\nprint(\"Mean of each sector:\", np.mean(gdp_data, axis=1))\n\nTranspose the array\n\ntransposed_gdp = np.transpose(gdp_data)\nprint(\"Transposed GDP data shape:\", transposed_gdp.shape)\n\nRetrieve all the negative values.\n\nnegative_growth = gdp_data &lt; 0  \nprint(\"Sectors with negative growth:\\n\", gdp_data[negative_growth])\n\nCalculate the changes every quarter for Sector 1.\n\nThe gdp_data is longitudinal, with each row representing observations for a specific sector over time. This makes growth and contraction trends meaningful to analyze. To calculate changes in the data using NumPy, we can use the numpy.diff() function, which computes the differences between successive values in an array.\nsector1_array = gdp_data[0, :] # first row, all columns\nprint(\"sector1_array:\", sector1_array)\n\nsector1_changes = np.diff(sector1_array)\nprint(\"\\nsector1_changes:\", sector1_changes)\nprint(\"\\nsector1_changes absolute change:\", np.absolute(sector1_changes))\nNumPy financial functions\nCalculate the future value of $1000 invested for 3 years at a 5.0% average annual rate of return.\nnp.fv(rate=0.05, nper=3, pmt=0, pv=-1000)\nBy convention, the negative sign represents cash flow out (i.e. money not available today).\nExample 2:\nYou have a loan of 10,000 SGD at 9% annual interest. How long would it take to pay-off the load if your monthly payment is at 750?\nnp.round(npf.nper(0.09/12, -750, 10000), 5)\n# divided by 12, because the interest is annual but the payment is monthly"
  },
  {
    "objectID": "for-tas/02-numpy-notes.html#section-4-visualizing-array-contents-matplotlib",
    "href": "for-tas/02-numpy-notes.html#section-4-visualizing-array-contents-matplotlib",
    "title": "Introduction to Numpy & Matplotlib",
    "section": "Section 4: Visualizing Array contents (Matplotlib)",
    "text": "Section 4: Visualizing Array contents (Matplotlib)\nSimple Lineplot\nplt.plot(gdp_data)\nplt.xlabel('Values')\nplt.ylabel('Sectors')\nplt.title('Values Over Quarters')\nplt.legend()\nplt.grid()\nplt.show()\nLineplot for each sector\ntransposed = gdp_data.T\nfor sector in range(7):\n    plt.plot(transposed[:, sector], label=f'Sector {sector + 1}')\n\nplt.legend()\nplt.grid()\nplt.show()\nBoxplot\ntransposed = gdp_data.T\n\nplt.boxplot(transposed)\nplt.grid()\nplt.show()"
  },
  {
    "objectID": "coc.html",
    "href": "coc.html",
    "title": "Code of conduct",
    "section": "",
    "text": "In order to foster a positive and professional learning environment we encourage the following kinds of behaviours:\n\nUse welcoming and inclusive language\nBe respectful of different viewpoints and experiences\nGracefully accept constructive criticism\nFocus on what is best for the community\nShow courtesy and respect towards other community members\n\n(Adapted from The Carpentries’ Code of Conduct)"
  },
  {
    "objectID": "for-tas/01-basics-notes.html",
    "href": "for-tas/01-basics-notes.html",
    "title": "Introduction to Python",
    "section": "",
    "text": "print(\"Hello World!\")\n5 + 5 \nPython has a built-in function called print that prints things as text.\nCall the function (i.e., tell Python to run it) by using its name.\nprint(10 - 5)\nprint(10 * 2)\nprint(\"hello world\")\nUse comments to add a layer of documentation to your code. E.g., explain what a block of code does, etc."
  },
  {
    "objectID": "for-tas/01-basics-notes.html#section-1-getting-started",
    "href": "for-tas/01-basics-notes.html#section-1-getting-started",
    "title": "Introduction to Python",
    "section": "",
    "text": "print(\"Hello World!\")\n5 + 5 \nPython has a built-in function called print that prints things as text.\nCall the function (i.e., tell Python to run it) by using its name.\nprint(10 - 5)\nprint(10 * 2)\nprint(\"hello world\")\nUse comments to add a layer of documentation to your code. E.g., explain what a block of code does, etc."
  },
  {
    "objectID": "for-tas/01-basics-notes.html#section-2-variables-and-assignment",
    "href": "for-tas/01-basics-notes.html#section-2-variables-and-assignment",
    "title": "Introduction to Python",
    "section": "Section 2: Variables and Assignment",
    "text": "Section 2: Variables and Assignment\n\nHow can I store data and perform simple calculations?\nVariables are names for values. # In Python, the = symbol assigns the value on the right to the variable on the left. # Once you declare a variable, you must assign value to it\ngreetings = \"Hello World!\"\nage = 25\nname  # This cell will give you an error because you tried to declare a variable without assigning a value to it. \nVariable names: don’t start with a digit, alphanumeric only with underscore, case sensitive, should be meaningful\nYou can also use print() to print out a variable’s value\nPut the variable name inside the bracket.\nThe things we passed to the function (the things inside the brackets) are called ‘arguments’ (more on this later)\nprint(greetings)\nprint(\"today's greetings:\", greetings)\nVariables must be created before they are used.\nIf a variable doesn’t exist yet, or if the name has been mis-spelled, Python reports an error.\nVariables can be used in calculations! We can use variables in calculations just as if they were values.\nage = age + 10\nprint(\"Age in ten years from now:\", age)\nYou can also assign a variable value to another variable\ncontinent = \"Asia\"\nposition = continent  # assign \"sign\" value to direction\nprint(position, continent)  # now both direction and sign has the same value!"
  },
  {
    "objectID": "for-tas/01-basics-notes.html#section-3-data-types-and-conversion",
    "href": "for-tas/01-basics-notes.html#section-3-data-types-and-conversion",
    "title": "Introduction to Python",
    "section": "Section 3: Data Types and Conversion",
    "text": "Section 3: Data Types and Conversion\ncountry = \"Singapore\"  # string\npublic_holidays = 11  # integer\navg_temp = 27.8  # float\npart_of_asean = True  # Boolean\nUse the built-in function type to find out what type a value or a variable has.\nRemember, when you change the value of a variable to a new data type,\nthe results of print(type(your_variable)) will change accordingly.\nQuestion: What is the type of part_of_asean?\nprint(type(part_of_asean))  # this should print out Boolean\nWhat would happen if we do this?\npart_of_asean = \"True\"\nprint(type(part_of_asean))  # now this should be a string!\nWhy care about data type?\nBecause a value’s data type determines what the program can do to it.\nThe calculations below work on int data type\nprint(public_holidays - 5)  \nBut this won’t work on a string\nprint(country - \"pore\") \nHowever you can use “+” and “*” on strings\nprint(country + \" best\")  # this works for string, though.\nprint(country * 4)  # this also works\nprint(\"=\" * 10)  # this also works\nprint(len(country))  # this would print out the number of characters a string has\nlen(public_holidays) \\# this should give you an error\nSome data types need to be converted before we can do some operations on them i.e. this will give you an error.\nprint(\"10\" + 2) \nprint(\"10\" + str(2))  # either we convert them all to string\nprint(int(10) + 2)  # or we convert them to int\nTake note of the execution order of your variables! They only change value when something is assigned to them.\npublic_holiday = 11  # initial value \nnew_holidays = public_holiday + 5\npublic_holiday = 10  # we update the variable\nprint(public_holiday, new_holidays)"
  },
  {
    "objectID": "for-tas/01-basics-notes.html#section-4-built-in-functions-help-and-error-messages",
    "href": "for-tas/01-basics-notes.html#section-4-built-in-functions-help-and-error-messages",
    "title": "Introduction to Python",
    "section": "Section 4: Built-in functions, Help, and Error Messages",
    "text": "Section 4: Built-in functions, Help, and Error Messages\n\nExplain how to pull the help function\nSome tips on error messages\nRefer to slides for full content"
  },
  {
    "objectID": "for-tas/01-basics-notes.html#section-5-list",
    "href": "for-tas/01-basics-notes.html#section-5-list",
    "title": "Introduction to Python",
    "section": "Section 5: List",
    "text": "Section 5: List\nquarterly_gdp_growth = [-2,-5.8, 2.8, 2.6, 7.3, 7.8]  # growth rates from 2023 Q1 to 2024 Q2\nprint('GDP growth rates:', quarterly_gdp_growth)\nprint('Number of quarters:', len(quarterly_gdp_growth))\nUse square bracket and index number to retrieve an item from the list.\nRemember that index starts from 0 instead of 1.\nSo if you want to retrieve the fourth item (2021’s growth rate), the index will be 3.\nprint('GDP growth rate in 2023 Q1:', quarterly_gdp_growth[0])\nprint('GDP growth rate in 2024 Q2:', quarterly_gdp_growth[5])\nList values can be replaced by simply assigning a new value to them.\nUpdate the growth rate for 2023 Q3 (index 2) with the correct figure.\nquarterly_gdp_growth[2] = -2.8\nprint('Updated GDP growth rates:', quarterly_gdp_growth)\nWhat happens if we try to retrieve an index that doesn’t exist?\nquarterly_gdp_growth[10] # This would cause an IndexError\nYou can append to the list (e.g., if we get data for 2024 Q3)\nprint('GDP growth rates initially:', quarterly_gdp_growth)\nquarterly_gdp_growth.append(3.2)  # Adding hypothetical  data\nprint('GDP growth rates after adding 2024 Q3 prediction:', quarterly_gdp_growth)\nadding item at the start e.g. 2022 Q4 was 9.4\nprint('GDP growth rates initially:', quarterly_gdp_growth)\nquarterly_gdp_growth.insert(0, 9.4) \nprint('GDP growth rates after adding 2022 Q4:', quarterly_gdp_growth)\nremove the two items we added\nprint('GDP growth rates initially:', quarterly_gdp_growth)\ndel quarterly_gdp_growth[0]  \nquarterly_gdp_growth.pop()\nprint('GDP growth rates after removing projection:', quarterly_gdp_growth)\nslicing list\nprint('Quarterly GDP growth rates in 2023:', quarterly_gdp_growth[0:4])  # Remember, the end index is exclusive\nprint('Most recent growth rate:', quarterly_gdp_growth[-1])  # Get the last item in the list\nprint('Growth rates for even quarters:', quarterly_gdp_growth[::2])  # Every other item\n# remember: list[start:end:stride]\nYou can also initialize an empty list to fill later\nfuture_growth_rates = []\nPrint the average quarterly GDP growth rate\ntotal_growth = sum(quarterly_gdp_growth)\naverage_growth = total_growth / len(quarterly_gdp_growth)\nprint(f\"Average quarterly GDP growth: {average_growth:.2f}%\")\nYou can include values of different types in a list, though for GDP data we’ll stick to numbers\nmixed_data = [\"2024 growth\", 3.0, \"2023 growth\", 2.7]\nprint(mixed_data)\n\nLearning Check #3\nWrite a code to print the growth rate for 2023 Q4 (remember, it’s the 5th item but index 4)\nprint(quarterly_gdp_growth[4])\nWrite a code to print the growth rates for the first three quarters of 2023\nprint(quarterly_gdp_growth[0:3])\nAdd a projected growth rate of 3.3 and 3.6 for 2024 Q3 and Q4 respectively at the end of the list\nquarterly_gdp_growth.insert(len(quarterly_gdp_growth), 3.3)\nquarterly_gdp_growth.insert(len(quarterly_gdp_growth), 3.6)\nprint(quarterly_gdp_growth)"
  },
  {
    "objectID": "for-tas/01-basics-notes.html#section-6-for-loops",
    "href": "for-tas/01-basics-notes.html#section-6-for-loops",
    "title": "Introduction to Python",
    "section": "Section 6: For Loops",
    "text": "Section 6: For Loops\nBasic loop example\nfor number in range(1, 7):  # 1 to 6, representing 6 quarters\n    print(\"Quarter\", number)\nYou can also use list in a for loop!\nA for loop executes commands once for each value in a list/collection.\nIt is basically telling python: “for each item in this list/collection, do these operations”\nfor growth in quarterly_gdp_growth:\n    print(f\"Quarterly GDP growth: {growth}%\")\nLet’s create a more informative output by combining the quarter information with the growth rate\nquarters = [\"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\", \"2024 Q1\", \"2024 Q2\", \"2024 Q3 prediction\", \"2024 Q4 prediction\"]\nlen(quarterly_gdp_growth)\nfor i in range(len(quarterly_gdp_growth)-1):\n    print(f\"{quarters[i]}: {quarterly_gdp_growth[i]}% GDP growth\")\nPrint out only the quarters with GDP growth rate above 1%\nprint(quarterly_gdp_growth)\nfor i, growth in enumerate(quarterly_gdp_growth):\n    if growth &gt; 1:\n        print(i, growth)\n        print(f\"{quarters[i]} had positive growth: {growth}%\")"
  },
  {
    "objectID": "for-tas/01-basics-notes.html#section-7-conditionals-if-else",
    "href": "for-tas/01-basics-notes.html#section-7-conditionals-if-else",
    "title": "Introduction to Python",
    "section": "Section 7: Conditionals (If-Else)",
    "text": "Section 7: Conditionals (If-Else)\nLet’s categorize our GDP growth rates\nlatest_growth = quarterly_gdp_growth[-1]  # Get the most recent growth rate\nif latest_growth &gt; 1:\n    print(f\"The latest GDP growth of {latest_growth}% indicates strong economic expansion.\")\nelif latest_growth &gt; 0:\n    print(f\"The latest GDP growth of {latest_growth}% shows moderate economic growth.\")\nelse:\n    print(f\"The latest GDP growth of {latest_growth}% suggests economic contraction.\")\nConditionals are often used inside loops.\nLet’s categorize all our quarterly growth rates.\nfor i, growth in enumerate(quarterly_gdp_growth):\n    if growth &gt; 1:\n        print(f\"{quarters[i]}: Strong growth at {growth}%\")\n    elif growth &gt; 0.5:\n        print(f\"{quarters[i]}: Moderate growth at {growth}%\")\n    else:\n        print(f\"{quarters[i]}: Slow growth at {growth}%\")\nYou can add a catch-all statement, else in conditionals.\nThe code inside this catch-all will be executed if none of the conditions are satisfied.\nLet’s check if we’ve had any quarters with negative growth\nfor i, growth in enumerate(quarterly_gdp_growth):\n    if growth &lt; 0:\n        print(f\"{quarters[i]} showed economic contraction with {growth}% growth.\")\n        break  # Exit the loop if we find a negative growth quarter\n    else:\n        print(\"No quarters showed economic contraction in this period.\")\nWhat if you have more than one condition?\nUse elif (short for “else if”) to specify additional tests.\nelif must be placed between if and `else\nLet’s categorize growth rates more precisely\nfor i, growth in enumerate(quarterly_gdp_growth):\n    if growth &gt; 10:\n        print(f\"{quarters[i]}: Very strong growth at {growth}%\")\n    elif growth &gt; 5:\n        print(f\"{quarters[i]}: Strong growth at {growth}%\")\n    elif growth &gt; 2:\n        print(f\"{quarters[i]}: Moderate growth at {growth}%\")\n    elif growth &gt; 0:\n        print(f\"{quarters[i]}: Slow growth at {growth}%\")\n    else:\n        print(f\"{quarters[i]}: Economic contraction at {growth}%\")\nIMPORTANT\nPython steps through the statements of the conditional in order,\ntesting each in turn. So ordering matters!\nLet’s see an example of why order matters:\nfor growth in quarterly_gdp_growth:\n    if growth &gt; 0:\n        print(f\"{growth}% is moderate growth\")\n    elif growth &gt; 5:  # This will never be reached for growth &gt; 1\n        print(f\"{growth}% is strong growth\")\n    else:\n        print(f\"{growth}% is negative growth\")\nThe correct order would be:\nfor growth in quarterly_gdp_growth:\n    if growth &gt; 5:\n        print(f\"{growth}% is strong growth\")\n    elif growth &gt; 0:\n        print(f\"{growth}% is moderate growth\")\n    else:\n        print(f\"{growth}% is negative growth\")\n\nLearning check #4: Analyze GDP growth trends\nWrite a script that identifies the highest and lowest growth quarters\nhighest_growth = max(quarterly_gdp_growth)\nlowest_growth = min(quarterly_gdp_growth)\n\nhighest_quarter = quarters[quarterly_gdp_growth.index(highest_growth)]\nlowest_quarter = quarters[quarterly_gdp_growth.index(lowest_growth)]\n\nprint(f\"Highest growth: {highest_growth}% in {highest_quarter}\")\nprint(f\"Lowest growth: {lowest_growth}% in {lowest_quarter}\")"
  },
  {
    "objectID": "01-basics.html#kenalan-dulu",
    "href": "01-basics.html#kenalan-dulu",
    "title": "Understanding the World with Data",
    "section": "Kenalan dulu",
    "text": "Kenalan dulu\n\n\n\nDeri Siswara\n\n Dosen di Perbanas Institute, Dept. Sains Data\n derisiswara.art\n linkedin.com/in/derisiswara\n github.com/derisiswara\n Riwayat Pendidikan\n\nS1 Ekonomi Syariah, IPB University (2020)\nS2 Statistika dan Sains Data, IPB University (2024)"
  },
  {
    "objectID": "01-basics.html#sekarang-giliran-kamu",
    "href": "01-basics.html#sekarang-giliran-kamu",
    "title": "Understanding the World with Data",
    "section": "Sekarang giliran kamu",
    "text": "Sekarang giliran kamu"
  },
  {
    "objectID": "01-basics.html#semua-tentang-mata-kuliah-ini",
    "href": "01-basics.html#semua-tentang-mata-kuliah-ini",
    "title": "Understanding the World with Data",
    "section": "Semua tentang mata kuliah ini",
    "text": "Semua tentang mata kuliah ini\nCapaian Pembelajaran Mata Kuliah (CPMK)\n\nDapat mengenali dan menyebutkan pengertian statistika dan probabilitas dengan benar.\nDapat mengaitkan statistika dan probabilitas/teori peluang dengan benar.\nDapat menjelaskan dan melakukan perhitungan probabilitas dengan menggunakan definisi yang sudah dipelajari.\nDapat menganalisa kaitan karakteristik, parameter dari beberapa distribusi peubah acak diskret maupun peubah acak kontinu.\nDapat melakukan pengujian hipotesis terhadap mean (rataan), variansi, dan proporsi dari suatu populasi.\nDapat melakukan publikasi dari hasil pengujian hipotesis menggunakan perhitungan statistika dari data nyata."
  },
  {
    "objectID": "01-basics.html#nilai",
    "href": "01-basics.html#nilai",
    "title": "Understanding the World with Data",
    "section": "Nilai",
    "text": "Nilai\n\n\n\n\n\nQuiz\nTugas Mandiri\nUTS\nUAS\nTotal Bobot Penilaian\n\n\n\n\nCPMK 1\n5%\n\n5%\n\n10%\n\n\nCPMK 2\n5%\n\n5%\n\n10%\n\n\nCPMK 3\n7%\n\n8%\n\n15%\n\n\nCPMK 4\n\n10%\n5%\n\n15%\n\n\nCPMK 5\n\n10%\n\n10%\n20%\n\n\nCPMK 6\n\n10%\n\n20%\n30%\n\n\nTotal\n17%\n30%\n23%\n30%\n100%\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nSyarat Lulus MK:\n\nNilai setiap CPMK &gt;= 55\nNilai Akhir &gt;= 55\nTidak Lulus: Remedial!"
  },
  {
    "objectID": "01-basics.html#buku-pegangan",
    "href": "01-basics.html#buku-pegangan",
    "title": "Understanding the World with Data",
    "section": "Buku Pegangan",
    "text": "Buku Pegangan\n\nAgresti, A., Franklin, C., Klingenberg, B. 2018. Statistics: The Art and Science of Learning from Data. Pearson.\nMendenhall, W., Beaver, R. J., Beaver, B. M. 2013. Introduction to Probability and Statistics (14th edition). Brooks/Cole.\nOtt, R. L. and Longnecker, M. 2010. An Introduction to Statistical Methods and Data Analysis (6th edition). Brooks/Cole.\nLohr, S.L. 2010. Sampling: Design and Analysis (2nd edition). Brooks/Cole.\nScheaffer, R.L., Mendenhall, W., Ott, L., Gerow, K.G. 2012. Elementary Survey Sampling (7th edition). Brooks/Cole."
  },
  {
    "objectID": "01-basics.html#quick-survey",
    "href": "01-basics.html#quick-survey",
    "title": "Understanding the World with Data",
    "section": "Quick Survey!",
    "text": "Quick Survey!\nVote Now"
  },
  {
    "objectID": "01-basics.html#apakah-ini-data",
    "href": "01-basics.html#apakah-ini-data",
    "title": "Understanding the World with Data",
    "section": "Apakah ini data?",
    "text": "Apakah ini data?"
  },
  {
    "objectID": "01-basics.html#menyakiti-atau-menolong",
    "href": "01-basics.html#menyakiti-atau-menolong",
    "title": "Understanding the World with Data",
    "section": "Menyakiti atau Menolong?",
    "text": "Menyakiti atau Menolong?\n\n - Apakah ini data?\n\nMahasiswa menjelaskan semua yang terjadi di gambar?"
  },
  {
    "objectID": "01-basics.html#tipe-data",
    "href": "01-basics.html#tipe-data",
    "title": "Understanding the World with Data",
    "section": "Tipe Data",
    "text": "Tipe Data\n\nsaidatascience.com"
  },
  {
    "objectID": "01-basics.html#tipe-data-1",
    "href": "01-basics.html#tipe-data-1",
    "title": "Understanding the World with Data",
    "section": "Tipe Data",
    "text": "Tipe Data\n\n\n\nData Interval: Suhu, Temperatur\nData Rasio: Tinggi Badan, Berat Badan\n\n\nInterval → bisa tambah/kurang, tapi tidak bisa bandingkan kelipatan. IQ, DLL\nRasio → bisa tambah/kurang dan bisa bandingkan kelipatan (dua kali lipat, separuh, dll)."
  },
  {
    "objectID": "01-basics.html#unstructured-data",
    "href": "01-basics.html#unstructured-data",
    "title": "Understanding the World with Data",
    "section": "Unstructured Data",
    "text": "Unstructured Data"
  },
  {
    "objectID": "01-basics.html#jelaskan-gambar",
    "href": "01-basics.html#jelaskan-gambar",
    "title": "Understanding the World with Data",
    "section": "Jelaskan Gambar!",
    "text": "Jelaskan Gambar!\n\n\nMahasiswa menjelaskan gambar dan alasan kenapa tahu SD paling tinggi?"
  },
  {
    "objectID": "01-basics.html#section",
    "href": "01-basics.html#section",
    "title": "Understanding the World with Data",
    "section": "",
    "text": "Banyak insight: mean, bar, max, highest, dll"
  },
  {
    "objectID": "01-basics.html#statistika-dan-tipe-tipenya",
    "href": "01-basics.html#statistika-dan-tipe-tipenya",
    "title": "Understanding the World with Data",
    "section": "Statistika dan Tipe-tipenya",
    "text": "Statistika dan Tipe-tipenya\n\n\nStatistika Deskriptif: Menggambarkan data dengan ringkasan numerik dan visual\nStatistika Inferensial: Menarik kesimpulan tentang populasi dari sampel"
  },
  {
    "objectID": "01-basics.html#probabilitas-dalam-kehidupan-sehari-hari",
    "href": "01-basics.html#probabilitas-dalam-kehidupan-sehari-hari",
    "title": "Understanding the World with Data",
    "section": "Probabilitas dalam Kehidupan Sehari-hari",
    "text": "Probabilitas dalam Kehidupan Sehari-hari\n\nRamalan cuaca: “60% kemungkinan hujan besok”\nKeputusan medis: Probabilitas sembuh dengan pengobatan tertentu\nKeuangan: Probabilitas investasi menghasilkan keuntungan\nAsuransi: Perhitungan risiko berbagai kejadian"
  },
  {
    "objectID": "01-basics.html#defnisi-probabilitas",
    "href": "01-basics.html#defnisi-probabilitas",
    "title": "Understanding the World with Data",
    "section": "Defnisi Probabilitas",
    "text": "Defnisi Probabilitas\nProbabilitas ilmu tentang ketidakpastian\n\nMenyediakan kerangka matematis untuk menganalisis ketidaktahuan\nMembantu membuat keputusan berdasarkan informasi terbatas\nMemungkinkan kita mengukur tingkat keyakinan terhadap kejadian yang belum terjadi"
  },
  {
    "objectID": "01-basics.html#keterkaitan-probabilitas-dengan-statistika",
    "href": "01-basics.html#keterkaitan-probabilitas-dengan-statistika",
    "title": "Understanding the World with Data",
    "section": "Keterkaitan Probabilitas dengan Statistika",
    "text": "Keterkaitan Probabilitas dengan Statistika\n\nStatistika menggunakan hasil pengolahan data untuk membuat kesimpulan atau keputusan\nKlaim statistik selalu berbasis peluang, bukan kepastian mutlak\n\nContoh: Dari survei 1.000 orang, 65% menyukai produk A → kita dapat menyatakan “mayoritas responden menyukai produk tersebut”\n\nPentingnya probabilitas:\n\nDalam uji hipotesis, kita menyatakan “dengan tingkat keyakinan 95%, klaim ini didukung data”\nStatistika menyediakan dasar untuk inferensi yang terukur dan transparan\nSetiap kesimpulan statistik mengandung unsur ketidakpastian"
  }
]