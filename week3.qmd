# Eksperimen Acak, Ruang Sampel, dan Kejadian

## Memahami Konsep Keacakan (Randomness)

### Apa itu "Acak"?

**Definisi Intuitif**: 

Keacakan bukan berarti "tanpa pola" atau "kacau total". Keacakan adalah **ketidakpastian hasil individual** meski kita bisa memprediksi **pola jangka panjang**.

**Contoh Mudah**:

- **Individual**: Tidak bisa prediksi hasil lempar koin tunggal
- **Agregat**: Bisa prediksi bahwa dari 1000 lemparan, sekitar 500 akan muncul angka

### Karakteristik Keacakan

1. **Unpredictable individually**: Hasil tunggal tidak dapat diprediksi
2. **Predictable in aggregate**: Pola jangka panjang dapat diprediksi
3. **No memory**: Hasil sebelumnya tidak mempengaruhi hasil berikutnya

```{r}
# Simulasi lempar koin untuk menunjukkan pola jangka panjang
set.seed(123)
n_flips <- 1000
flips <- sample(c("Head", "Tail"), n_flips, replace = TRUE)

# Proporsi Head secara kumulatif
cumulative_heads <- cumsum(flips == "Head")
cumulative_prop <- cumulative_heads / (1:n_flips)

# Plot konvergensi ke 0.5
plot(1:n_flips, cumulative_prop, type = "l",
     xlab = "Number of Flips", 
     ylab = "Proportion of Heads",
     main = "Law of Large Numbers: Coin Flips")
abline(h = 0.5, lty = 2)
```

## Eksperimen Acak (Random Experiment)

### Definisi yang Diperluas

**Eksperimen acak** memiliki tiga komponen kunci:

1. **Prosedur yang jelas**: Langkah-langkah yang dapat diulang
2. **Hasil yang tidak pasti**: Meski prosedur sama, hasil bervariasi
3. **Semua kemungkinan diketahui**: Dapat mendaftar semua hasil yang mungkin

### Contoh Eksperimen Acak

#### **Contoh Sederhana**

1. **Melempar koin**: Hasil bisa Angka (A) atau Gambar (G)
2. **Melempar dadu**: Hasil bisa 1, 2, 3, 4, 5, atau 6
3. **Mengambil kartu**: Dari 52 kartu, bisa dapat kartu apa saja
4. **Mengukur tinggi mahasiswa**: Hasilnya bervariasi antar individu

#### **Contoh Kompleks**

1. **Jumlah pelanggan** yang datang ke bank dalam 1 jam
2. **Waktu tunggu** bus di halte
3. **Jumlah produk cacat** dalam produksi harian
4. **Curah hujan** dalam satu hari

### Contoh Bukan Eksperimen Acak

- Menghitung 2 + 3 (hasilnya pasti 5)
- Mengukur titik didih air pada tekanan 1 atm (pasti 100°C)
- Menentukan jumlah hari dalam seminggu (pasti 7)

### Jenis-jenis Keacakan

#### **Natural Randomness**

Keacakan yang terjadi di alam:

- Radioactive decay
- Quantum mechanical processes
- Weather patterns

#### **Designed Randomness** 

Keacakan yang sengaja diciptakan:

- Lottery drawings
- Random sampling
- Clinical trial randomization

#### **Chaotic Systems**

Sistem deterministik yang terlihat acak:

- Stock market fluctuations
- Population dynamics
- Climate variations

---

## Ruang Sampel (Sample Space)

### Definisi Intuitif

**Ruang sampel** adalah **kumpulan semua hasil yang mungkin** dari suatu eksperimen acak. Seperti daftar lengkap semua kemungkinan yang bisa terjadi.

### Definisi Formal

Ruang sampel, dilambangkan **S** atau **Ω** (omega), adalah himpunan semua hasil elementer (elementary outcomes) yang mungkin dari suatu eksperimen acak.

### Karakteristik Ruang Sampel

1. **Lengkap**: Mencakup semua kemungkinan hasil
2. **Saling terpisah**: Tidak ada hasil yang tumpang tindih
3. **Pasti terjadi satu**: Dalam setiap eksperimen, pasti ada satu hasil yang terjadi

### Contoh Ruang Sampel

#### **Eksperimen Diskret (Hasil Terhingga)**

**1. Melempar 1 koin**:
$$S = \{A, G\}$$

**2. Melempar 1 dadu**:
$$S = \{1, 2, 3, 4, 5, 6\}$$

**3. Melempar 2 koin**:
$$S = \{AA, AG, GA, GG\}$$

**4. Memilih 1 mahasiswa dari 3 mahasiswa (Ali, Budi, Citra)**:
$$S = \{Ali, Budi, Citra\}$$

#### **Eksperimen Kontinu (Hasil Tak Terhingga)**

**1. Mengukur tinggi mahasiswa (dalam cm)**:
$$S = \{x : 140 \leq x \leq 200\}$$

**2. Waktu tunggu bus (dalam menit)**:
$$S = \{t : t \geq 0\}$$

**3. Suhu udara (dalam °C)**:
$$S = \{T : -10 \leq T \leq 40\}$$

### Menentukan Ruang Sampel yang Tepat

**Prinsip**: 

Ruang sampel harus **relevan dengan pertanyaan** yang ingin dijawab.

**Contoh**: Melempar 2 koin

**Jika pertanyaannya**: 

"Berapa banyak Head?"
```{r}
# Ruang sampel berdasarkan jumlah Head
S1 <- c("0 Head", "1 Head", "2 Head")
print(S1)
```

**Jika pertanyaannya**: 

"Urutan hasil apa yang muncul?"
```{r}
# Ruang sampel berdasarkan urutan
S2 <- c("HH", "HT", "TH", "TT")
print(S2)
```

### Counting Techniques untuk Ruang Sampel

#### **Multiplication Principle**

Jika eksperimen terdiri dari k tahap dengan n₁, n₂, ..., nₖ kemungkinan hasil, maka total hasil = n₁ × n₂ × ... × nₖ

```{r}
# Contoh: Password 3 digit (0-9) dan 2 huruf (A-Z)
digit_choices <- 10
letter_choices <- 26
total_passwords <- digit_choices^3 * letter_choices^2
print(paste("Total passwords:", format(total_passwords, scientific = FALSE)))
```

#### **Permutations and Combinations**

**Permutasi** (urutan penting):

$$P(n,k) = \frac{n!}{(n-k)!}$$

**Kombinasi** (urutan tidak penting):

$$C(n,k) = \binom{n}{k} = \frac{n!}{k!(n-k)!}$$

```{r}
# Fungsi helper
permutation <- function(n, k) factorial(n) / factorial(n - k)
combination <- function(n, k) factorial(n) / (factorial(k) * factorial(n - k))

# Contoh: Memilih 3 mahasiswa dari 10 untuk menjadi ketua, wakil, sekretaris
print(paste("Permutasi (urutan penting):", permutation(10, 3)))
print(paste("Kombinasi (urutan tidak penting):", combination(10, 3)))
```

### Representasi Ruang Sampel

#### **Metode Enumerasi**

Mendaftar semua kemungkinan hasil secara eksplisit.

**Contoh**: 

Melempar 2 dadu
```
S = {(1,1), (1,2), (1,3), (1,4), (1,5), (1,6),
     (2,1), (2,2), (2,3), (2,4), (2,5), (2,6),
     (3,1), (3,2), (3,3), (3,4), (3,5), (3,6),
     (4,1), (4,2), (4,3), (4,4), (4,5), (4,6),
     (5,1), (5,2), (5,3), (5,4), (5,5), (5,6),
     (6,1), (6,2), (6,3), (6,4), (6,5), (6,6)}
```

#### **Diagram Pohon (Tree Diagram)**

**Contoh**: 

Melempar 2 koin

```{r}
# Visualisasi dengan R (sederhana)
# Koin 1: A atau G
# Koin 2: A atau G
hasil_2_koin <- expand.grid(Koin1 = c("A", "G"), 
                            Koin2 = c("A", "G"))
print(hasil_2_koin)
```

![](https://www.mathsisfun.com/data/images/probability-tree-coin2.svg)

#### **Diagram Venn**

Berguna untuk menunjukkan hubungan antar kejadian dalam ruang sampel.

![](https://images.nagwa.com/figures/explainers/258159043062/7.svg)
![](https://images.nagwa.com/figures/explainers/258159043062/5.svg)

---

## Kejadian (Event)

### Definisi Intuitif

**Kejadian** adalah **himpunan bagian dari ruang sampel** yang menjadi fokus perhatian kita. Seperti memilih hasil-hasil tertentu yang kita minati dari semua kemungkinan hasil.

### Definisi Formal

Kejadian (event) adalah subset dari ruang sampel S. Suatu kejadian dikatakan **terjadi** jika hasil eksperimen termasuk dalam himpunan kejadian tersebut.

### Notasi dan Terminologi

- **Kejadian**: Dilambangkan dengan huruf kapital A, B, C, ...
- **Hasil elementer**: Anggota tunggal dari ruang sampel
- **Kejadian sederhana**: Kejadian yang hanya mengandung satu hasil elementer
- **Kejadian majemuk**: Kejadian yang mengandung lebih dari satu hasil elementer

### Contoh Kejadian

**Eksperimen**: 

Melempar 1 dadu, S = {1, 2, 3, 4, 5, 6}

**Kejadian A**: 

"Muncul bilangan genap"
$$A = \{2, 4, 6\}$$

**Kejadian B**: 

"Muncul bilangan prima"
$$B = \{2, 3, 5\}$$

**Kejadian C**: 

"Muncul angka 3"
$$C = \{3\}$$ (kejadian sederhana)

**Kejadian D**: 

"Muncul angka lebih dari 4"
$$D = \{5, 6\}$$

### Event dalam Konteks Practical

#### **Medical Diagnosis Example**

**Eksperimen**: 

Tes COVID-19 pada pasien

**Ruang Sampel**: 

S = {(Test+, COVID+), (Test+, COVID-), (Test-, COVID+), (Test-, COVID-)}

**Kejadian Penting**:

- A = "Test Positive" = {(Test+, COVID+), (Test+, COVID-)}
- B = "Actually has COVID" = {(Test+, COVID+), (Test-, COVID+)}
- C = "Correct Diagnosis" = {(Test+, COVID+), (Test-, COVID-)}

```{r}
# Simulasi data diagnosis
S <- expand.grid(Test = c("Positive", "Negative"), 
                 COVID = c("Has", "NoHas"))
print("Sample Space for COVID Test:")
print(S)

# Define events
A <- S[S$Test == "Positive", ]
B <- S[S$COVID == "Has", ]
print("Event A (Test Positive):")
print(A)
```

---

## Klasifikasi Kejadian

### 1. Berdasarkan Jumlah Elemen

#### **Kejadian Sederhana (Simple Event)**

**Definisi**: 

Kejadian yang hanya mengandung satu hasil elementer.

**Contoh**:

- A = "Muncul angka 5 pada dadu" = {5}
- B = "Terpilih mahasiswa Ali" = {Ali}

#### **Kejadian Majemuk (Compound Event)**

**Definisi**: 

Kejadian yang mengandung lebih dari satu hasil elementer.

**Contoh**:

- A = "Muncul bilangan ganjil pada dadu" = {1, 3, 5}
- B = "Muncul kartu merah" = {semua kartu ♥ dan ♦}

### 2. Berdasarkan Kemungkinan Terjadinya

#### **Kejadian Pasti (Certain Event)**

**Definisi**: 

Kejadian yang pasti terjadi dalam setiap eksperimen.

**Karakteristik**: 

Sama dengan ruang sampel (A = S)

**Contoh**:

- "Muncul angka 1-6 pada dadu" = {1, 2, 3, 4, 5, 6} = S
- "Tinggi mahasiswa positif" = S (dalam konteks pengukuran tinggi)

#### **Kejadian Mustahil (Impossible Event)**

**Definisi**: 

Kejadian yang tidak mungkin terjadi.

**Karakteristik**: 

Himpunan kosong (A = ∅)

**Contoh**:

- "Muncul angka 7 pada dadu" = ∅
- "Tinggi mahasiswa negatif" = ∅

### 3. Berdasarkan Hubungan Antar Kejadian

#### **Kejadian Saling Lepas (Mutually Exclusive)**

**Definisi**: 

Dua kejadian yang tidak dapat terjadi bersamaan.

**Karakteristik**: 

A ∩ B = ∅

**Contoh**:

- A = "Muncul bilangan genap" = {2, 4, 6}
- B = "Muncul bilangan ganjil" = {1, 3, 5}
- A ∩ B = ∅

#### **Kejadian Saling Bebas (Independent)**

**Definisi**: 

Terjadinya satu kejadian tidak mempengaruhi probabilitas kejadian lain.

**Contoh**:

- Hasil lempar koin pertama tidak mempengaruhi hasil lempar koin kedua
- Nilai ujian matematika tidak mempengaruhi cuaca hari ini

#### **Kejadian Komplemen (Complement)**

**Definisi**: 

Kejadian yang berisi semua hasil yang tidak termasuk dalam kejadian asli.

**Notasi**: 

A' atau A^c atau Ā

**Karakteristik**: 

- A ∪ A' = S
- A ∩ A' = ∅

**Contoh**:

- Jika A = "Muncul bilangan genap" = {2, 4, 6}
- Maka A' = "Muncul bilangan ganjil" = {1, 3, 5}

### Operasi pada Kejadian

#### **Gabungan (Union)**

**Definisi**: 

A ∪ B adalah kejadian yang terjadi jika A atau B (atau keduanya) terjadi.

**Contoh**:

- A = {2, 4, 6}, B = {1, 2, 3}
- A ∪ B = {1, 2, 3, 4, 6}

#### **Irisan (Intersection)**

**Definisi**: 

A ∩ B adalah kejadian yang terjadi jika A dan B terjadi bersamaan.

**Contoh**:

- A = {2, 4, 6}, B = {1, 2, 3}
- A ∩ B = {2}

#### **Selisih (Difference)**

**Definisi**: 

A - B adalah kejadian yang terjadi jika A terjadi tetapi B tidak terjadi.

**Contoh**:

- A = {2, 4, 6}, B = {1, 2, 3}
- A - B = {4, 6}

### Advanced Event Operations

#### **Partisi (Partition)**

**Definisi**: 

Kumpulan kejadian {A₁, A₂, ..., Aₙ} membentuk partisi dari S jika:

1. Saling lepas: Aᵢ ∩ Aⱼ = ∅ untuk i ≠ j
2. Exhaustive: A₁ ∪ A₂ ∪ ... ∪ Aₙ = S

**Contoh**: 

Klasifikasi mahasiswa berdasarkan IPK

- A₁ = "IPK < 2.5" (Tidak Lulus)
- A₂ = "2.5 ≤ IPK < 3.0" (Memuaskan)  
- A₃ = "3.0 ≤ IPK < 3.5" (Sangat Memuaskan)
- A₄ = "IPK ≥ 3.5" (Pujian)

```{r}
# Simulasi data IPK
set.seed(456)
ipk <- rnorm(100, mean = 3.0, sd = 0.5)
ipk <- pmax(0, pmin(4, ipk))  # Batasi antara 0-4

# Buat partisi
partition <- cut(ipk, breaks = c(0, 2.5, 3.0, 3.5, 4.0),
                labels = c("Tidak Lulus", "Memuaskan", "Sangat Memuaskan", "Pujian"),
                include.lowest = TRUE)

# Tampilkan distribusi
table(partition)
```

#### **De Morgan's Laws**

Hukum yang menghubungkan operasi union, intersection, dan complement:

1. $(A \cup B)' = A' \cap B'$
2. $(A \cap B)' = A' \cup B'$

```{r}
# Verifikasi De Morgan's Law dengan contoh
S <- 1:10
A <- c(2, 4, 6, 8, 10)  # Bilangan genap
B <- c(1, 3, 5, 7, 9)   # Bilangan ganjil

# Law 1: (A ∪ B)' = A' ∩ B'
union_AB <- union(A, B)
complement_union <- setdiff(S, union_AB)

complement_A <- setdiff(S, A)
complement_B <- setdiff(S, B)
intersection_complements <- intersect(complement_A, complement_B)

print("Verifikasi De Morgan Law 1:")
print(paste("(A ∪ B)':", paste(complement_union, collapse = ", ")))
print(paste("A' ∩ B':", paste(intersection_complements, collapse = ", ")))
print(paste("Equal?", identical(complement_union, intersection_complements)))
```

---

## Implementasi dengan R

### Menampilkan Ruang Sampel

```{r}
# Eksperimen: Melempar 2 dadu
dadu1 <- 1:6
dadu2 <- 1:6
ruang_sampel <- expand.grid(Dadu1 = dadu1, Dadu2 = dadu2)
print(ruang_sampel)
cat("Jumlah hasil elementer:", nrow(ruang_sampel))
```

### Mendefinisikan Kejadian

```{r}
# Kejadian A: Jumlah mata dadu = 7
A <- ruang_sampel[ruang_sampel$Dadu1 + ruang_sampel$Dadu2 == 7, ]
print("Kejadian A (jumlah = 7):")
print(A)

# Kejadian B: Kedua dadu menunjukkan angka sama
B <- ruang_sampel[ruang_sampel$Dadu1 == ruang_sampel$Dadu2, ]
print("Kejadian B (angka sama):")
print(B)
```

### Operasi Kejadian

```{r}
# Gabungan kejadian A dan B
A_index <- which(ruang_sampel$Dadu1 + ruang_sampel$Dadu2 == 7)
B_index <- which(ruang_sampel$Dadu1 == ruang_sampel$Dadu2)

# Union
AB_union_index <- union(A_index, B_index)
AB_union <- ruang_sampel[AB_union_index, ]
print("A ∪ B:")
print(AB_union)

# Intersection
AB_intersect_index <- intersect(A_index, B_index)
AB_intersect <- ruang_sampel[AB_intersect_index, ]
print("A ∩ B:")
print(AB_intersect)
```

---

## Visualisasi dengan Diagram Venn

```{r}
# Fungsi sederhana untuk menunjukkan operasi set
show_set_operation <- function(A, B, S, operation = "union") {
  cat("Sample Space S:", paste(S, collapse = ", "), "\n")
  cat("Set A:", paste(A, collapse = ", "), "\n")
  cat("Set B:", paste(B, collapse = ", "), "\n")
  
  if (operation == "union") {
    result <- union(A, B)
    cat("A ∪ B:", paste(result, collapse = ", "), "\n")
  } else if (operation == "intersection") {
    result <- intersect(A, B)
    cat("A ∩ B:", paste(result, collapse = ", "), "\n")
  } else if (operation == "difference") {
    result <- setdiff(A, B)
    cat("A - B:", paste(result, collapse = ", "), "\n")
  }
}

# Contoh penggunaan
S <- 1:12
A <- c(2, 4, 6, 8, 10, 12)  # Genap
B <- c(3, 6, 9, 12)         # Kelipatan 3

show_set_operation(A, B, S, "union")
show_set_operation(A, B, S, "intersection")
show_set_operation(A, B, S, "difference")
```

---

## Aplikasi dalam Kehidupan Nyata

### Quality Control in Manufacturing

**Eksperimen**: 

Mengambil 5 produk secara acak dari lini produksi

**Ruang Sampel**: 

Semua kemungkinan kombinasi produk yang cacat/baik

**Kejadian**:

- A = "Semua produk baik"
- B = "Minimal 1 produk cacat"

**Analisis**:

- A = {semua kombinasi tanpa cacat}
- B = {semua kombinasi dengan minimal 1 cacat}

```{r}
# Misalkan total 10 produk, 5 diambil
set.seed(789)
produk <- sample(c("Baik", "Cacat"), 10, replace = TRUE)
ruang_sampel_produksi <- combn(1:10, 5, simplify = FALSE)

# Definisi kejadian
A_produksi <- Filter(function(x) all(produk[x] == "Baik"), ruang_sampel_produksi)
B_produksi <- Filter(function(x) any(produk[x] == "Cacat"), ruang_sampel_produksi)

# Tampilkan contoh kejadian
print("Contoh ruang sampel untuk 10 produk, 5 diambil:")
print(head(ruang_sampel_produksi, 3))

print("Kejadian A (semua baik):")
print(A_produksi)

print("Kejadian B (minimal 1 cacat):")
print(B_produksi)
```

### A/B Testing in Marketing

**Eksperimen**: 

Menguji dua versi website (A vs B) pada pengunjung

**Ruang Sampel**: 

{(Version A, Click), (Version A, No Click), (Version B, Click), (Version B, No Click)}

**Kejadian**:

- A = "Pengunjung klik pada Version A"
- B = "Pengunjung tidak klik pada Version A tapi klik pada Version B"

**Analisis**:

- A = {(A, Click)}
- B = {(A, No Click), (B, Click)}

```{r}
# Misalkan 100 pengunjung, 50% ke A, 50% ke B
set.seed(101)
pengunjung <- 1:100
assignment <- sample(c("A", "B"), 100, replace = TRUE)

# Simulasi klik (30% untuk A, 25% untuk B)
klik <- ifelse(assignment == "A", rbinom(100, 1, 0.3), rbinom(100, 1, 0.25))

data_ab <- data.frame(Pengunjung = pengunjung, Version = assignment, Click = klik)

# Definisi kejadian
A_ab <- data_ab[data_ab$Version == "A" & data_ab$Click == 1, ]
B_ab <- data_ab[data_ab$Version == "B" & data_ab$Click == 1, ]

# Tampilkan contoh data
print("Contoh data pengunjung dan klik:")
head(data_ab)

print("Kejadian A (klik pada Version A):")
print(A_ab)

print("Kejadian B (klik pada Version B setelah tidak klik pada Version A):")
print(B_ab)
```

---

## Contoh Penerapan Lengkap

### Kasus: Survei Kepuasan Mahasiswa

**Eksperimen**: 

Mengambil secara acak 1 mahasiswa dan menanyakan kepuasan terhadap layanan kampus.

**Ruang Sampel**: 

S = {Sangat Puas, Puas, Cukup, Tidak Puas}

**Definisi Kejadian**:

- A = "Mahasiswa merasa puas" = {Sangat Puas, Puas}
- B = "Mahasiswa tidak complain" = {Sangat Puas, Puas, Cukup}
- C = "Mahasiswa memberikan rating tinggi" = {Sangat Puas}

**Analisis**:

- A ∩ B = {Sangat Puas, Puas}
- A ∪ B = {Sangat Puas, Puas, Cukup}
- A' = {Cukup, Tidak Puas}
- Apakah A dan C saling lepas? Tidak, karena A ∩ C = {Sangat Puas} ≠ ∅

```{r}
# Implementasi dalam R
S <- c("Sangat Puas", "Puas", "Cukup", "Tidak Puas")
A <- c("Sangat Puas", "Puas")
B <- c("Sangat Puas", "Puas", "Cukup")
C <- c("Sangat Puas")

# Operasi himpunan
A_intersect_B <- intersect(A, B)
A_union_B <- union(A, B)
A_complement <- setdiff(S, A)

print(paste("A ∩ B:", paste(A_intersect_B, collapse = ", ")))
print(paste("A ∪ B:", paste(A_union_B, collapse = ", ")))
print(paste("A':", paste(A_complement, collapse = ", ")))
```

---

## Ringkasan Konsep Penting

| Konsep | Definisi | Contoh Praktis |
|--------|----------|----------------|
| **Keacakan** | Ketidakpastian individual, prediktabilitas agregat | Lempar koin: tidak tahu hasil tunggal, tapi tahu proporsi jangka panjang ≈ 50% |
| **Eksperimen Acak** | Prosedur dengan hasil tidak pasti yang dapat diulang | Survei pelanggan, quality control, medical tests |
| **Ruang Sampel** | Semua kemungkinan hasil | Tergantung pertanyaan penelitian |
| **Kejadian** | Subset ruang sampel yang menarik | "Customer puas", "Produk cacat", "Test positif" |
| **Partisi** | Kejadian saling lepas dan exhaustive | Klasifikasi berdasarkan kategori yang tidak tumpang tindih |

::: callout-tip
**Strategi Pemecahan Masalah**:

1. **Identifikasi eksperimen acak** - Apa yang sedang diamati/diukur?
2. **Tentukan ruang sampel** - Sesuaikan dengan pertanyaan yang ingin dijawab
3. **Definisikan kejadian** - Hasil mana yang relevan dengan masalah?
4. **Periksa hubungan kejadian** - Apakah saling lepas? Independent? Complement?
5. **Gunakan simulasi** - Validasi pemahaman dengan data sintetik
:::