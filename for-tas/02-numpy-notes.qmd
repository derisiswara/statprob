---
title: "Introduction to Numpy & Matplotlib"
subtitle: "Notes for instructors & TA"
author: "Bella Ratmelia"
format: html
---

## Section 1: Jupyter Notebook

-  Create .ipynb in VS Code 
-  Difference between markdown cells and code cells
-  Markdown (very briefly)

## Section 2: Numpy arrays

Installing Numpy (can run in the code cells)

`pip install numpy`

Importing numpy

`import numpy as np`

**Numpy creation and operations**

np.arange creates evenly spaced values within a given interval:

``` python
range_array = np.arange(0, 10, 0.5)
print("Range array:", range_array)
```

From list to array:

``` python
list_array = np.array([1, 2, 3, 4, 5])
print("NumPy array:", list_array)
```

Indexing and slicing

``` python
print("Original array:", range_array)
print("First element:", range_array[0])
print("Last element:", range_array[-1])
print("Slicing (elements 3 to 7):", range_array[2:7])
range_array[0] = 99
print("Update value of first element:", range_array[0])
```

Copies vs Views

-  Changes in original will be reflected in view and vice versa
-  Changes in original will NOT be reflected in copy

``` python
# original array
original = np.array([1, 2, 3, 4, 5])
print("Original array:", original)

# view of the original array
view = original.view()
print("View:", view)

# copy of the original array
copy = original.copy()
print("Copy:", copy)

# Modify the original array
original[0] = 99
print("\nAfter modifying the original array:")
print("Original array:", original)
print("View now:", view)  # reflects the changes
print("Copy now:", copy)  # remains unchanged

# Modify the view
view[1] = 100
print("\nAfter modifying the view:")
print("Original array:", original)  # affected
print("View now:", view)
print("Copy now:", copy)  # remains unchanged

# Modify the copy
copy[2] = 200
print("\nAfter modifying the copy:")
print("Original array:", original)  # not affected
print("View now:", view)  # not affected
print("Copy now:", copy)
```

## Section 3: Two-dimensional arrays

``` python
array_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(array_2d)
print("Shape of the array:", array_2d.shape)
print("Size of the array:", array_2d.size)
```

Indices in a 2D array:
``` python
array_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(array_2d[0,0])
```

Loading a CSV file to 2D array. 

In this CSV, the rows represent 7 different sectors and the columns represent the quarters from 2023 Q4, dating back all the way to 2019 Q1. 

Each cell contains the GDP growth of that sector for that quarter, compared to previous year's quarters.

``` python
gdp_data = np.loadtxt('data/sg-gdp.csv', delimiter=',', dtype="float16")
np.set_printoptions(suppress=True)

print("GDP data")
print(gdp_data)
print("GDP data shape:", gdp_data.shape)
```
1.  Find out the mean, standard deviation, max, and mean values.

``` python
print("Mean of GDP data:", np.mean(gdp_data))
print("Standard deviation of GDP data:", np.std(gdp_data))
print("Maximum value in GDP data:", np.amax(gdp_data))
print("Minimum value in GDP data:", np.amin(gdp_data))
```

2.  Find the mean for each quarter (column-wise operation)
3.  Find the mean for each sector (row-wise operation)

``` python
print("Mean of each quarter:", np.mean(gdp_data, axis=0))
print("Mean of each sector:", np.mean(gdp_data, axis=1))
```

4.  Transpose the array

```python
transposed_gdp = np.transpose(gdp_data)
print("Transposed GDP data shape:", transposed_gdp.shape)
```
5.  Retrieve all the negative values.

```python
negative_growth = gdp_data < 0  
print("Sectors with negative growth:\n", gdp_data[negative_growth])
```

6.  Calculate the changes every quarter for Sector 1.

The `gdp_data` is longitudinal, with each row representing observations for a specific sector over time. This makes growth and contraction trends meaningful to analyze. To calculate changes in the data using NumPy, we can use the numpy.diff() function, which computes the differences between successive values in an array.

``` python
sector1_array = gdp_data[0, :] # first row, all columns
print("sector1_array:", sector1_array)

sector1_changes = np.diff(sector1_array)
print("\nsector1_changes:", sector1_changes)
print("\nsector1_changes absolute change:", np.absolute(sector1_changes))
```

NumPy financial functions

Calculate the future value of $1000 invested for 3 years at a 5.0% average annual rate of return.

``` python
np.fv(rate=0.05, nper=3, pmt=0, pv=-1000)
```
By convention, the negative sign represents cash flow out (i.e. money not available today).

Example 2:

You have a loan of 10,000 SGD at 9% annual interest. How long would it take to pay-off the load if your monthly payment is at 750?

``` python
np.round(npf.nper(0.09/12, -750, 10000), 5)
# divided by 12, because the interest is annual but the payment is monthly
```

## Section 4: Visualizing Array contents (Matplotlib)

Simple Lineplot

``` python
plt.plot(gdp_data)
plt.xlabel('Values')
plt.ylabel('Sectors')
plt.title('Values Over Quarters')
plt.legend()
plt.grid()
plt.show()
```

Lineplot for each sector

``` python
transposed = gdp_data.T
for sector in range(7):
    plt.plot(transposed[:, sector], label=f'Sector {sector + 1}')

plt.legend()
plt.grid()
plt.show()
```

Boxplot

``` python
transposed = gdp_data.T

plt.boxplot(transposed)
plt.grid()
plt.show()
```